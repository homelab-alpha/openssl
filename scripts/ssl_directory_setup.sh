#!/bin/bash

# Script Name: ssl_directory_setup.sh
# Author: GJS (homelab-alpha)
# Date: 2025-02-17T08:56:25+01:00
# Version: 2.2.0

# Description:
# This script sets up a directory structure for SSL certificate management, generates
# random serial numbers for certificate databases, and creates OpenSSL configuration
# files for a trusted identity (root certificate authority) and time-stamping authority (TSA).
# Requirements: OpenSSL installed, write permissions in the specified directories.

# Usage:
# Run the script directly without any arguments:
# ./ssl_directory_setup.sh

# Notes:
# - Ensure OpenSSL is installed on your system.
# - The script creates directories and files under $HOME/ssl.

# Function to check if OpenSSL is installed
check_openssl_installed() {
  if ! command -v openssl &>/dev/null; then
    echo "Error: OpenSSL is not installed. Please install it before running this script."
    exit 1 # Stop the script with an error code
  fi
}

check_openssl_installed

# Function to print text in cyan color
print_cyan() {
  echo -e "\e[36m$1\e[0m"
}

# Function to generate a random hex value
generate_random_hex() {
  openssl rand -hex 16 || return 1
}

# Function to print section headers.
print_section_header() {
  echo ""
  print_cyan "=== $1 ==="
}

# Define directories.
ssl_dir="$HOME/ssl"
root_dir="$ssl_dir/root"
intermediate_dir="$ssl_dir/intermediate"
certificates_dir="$ssl_dir/certificates"
tsa_dir="$ssl_dir/tsa"
crl_backup_dir="$ssl_dir/crl-backups"

# Create directory structure.
print_section_header "Create directory structure"
mkdir -p "$root_dir"/{certs,crl,csr,db,newcerts,private} \
  "$intermediate_dir"/{certs,crl,csr,db,newcerts,private} \
  "$certificates_dir"/{certs,crl,csr,db,extfile,newcerts,private} \
  "$tsa_dir"/{cacerts,db,private,tsacerts} \
  "$crl_backup_dir"

# Create db files and set unique_subject attribute.
print_section_header "Create db files and set unique_subject attribute"

# Create index.txt files in each directory.
touch "$root_dir/db/index.txt"
touch "$intermediate_dir/db/index.txt"
touch "$certificates_dir/db/index.txt"
touch "$tsa_dir/db/index.txt"

# Set unique_subject attribute in each index.txt.attr file.
for dir in "$root_dir/db" "$intermediate_dir/db" "$certificates_dir/db" "$tsa_dir/db"; do
  touch "$dir/index.txt.attr"
  echo "unique_subject = yes" >"$dir/index.txt.attr"
done

# Renew db numbers (serial and CRL) in one loop.
print_section_header "Renew db numbers (serial and CRL)"
for type in "serial" "crlnumber"; do
  for dir in "$root_dir/db" "$intermediate_dir/db" "$certificates_dir/db" "$tsa_dir/db"; do
    generate_random_hex >"$dir/$type"
  done
done

# Create openssl config files for trusted-id.
print_section_header "Create openssl config files for trusted-id"
cat <<EOF >"$root_dir/trusted-id.cnf"
#
# OpenSSL example configuration file.
# See doc/man5/config.pod for more info.
#
# This is mostly being used for generation of certificate requests,
# but may be used for auto loading of providers

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME = .

# Use this in order to automatically load providers.
openssl_conf = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics = 1

# Extra OBJECT IDENTIFIER info:
# oid_file = \$ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1 = 1.2.3.4
# Or use config file substitution like this:
# testoid2 = \${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[ openssl_init ]
providers = provider_sect

# List of providers to load
[ provider_sect ]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

# If no providers are activated explicitly, the default one is activated implicitly.
# See man 7 OSSL_PROVIDER-default for more details.
#
# If you add a section explicitly activating any other provider(s), you most
# probably need to explicitly activate the default provider, otherwise it
# becomes unavailable in openssl. As a consequence applications depending on
# OpenSSL may not work correctly which could lead to significant system
# problems including inability to remotely access the system.
[ default_sect ]
# activate = 1

####################################################################
[ ca ]
default_ca = CA_default   # The default ca section

####################################################################
[ CA_default ]

certs = $HOME/ssl/root/certs   # Where the issued certs are kept
crl_dir = $HOME/ssl/root/crl   # Where the issued crl are kept
database = $HOME/ssl/root/db/index.txt   # database index file.
unique_subject = yes   # Set to 'no' to allow creation of several certs with same subject.
new_certs_dir = $HOME/ssl/root/newcerts   # default place for new certs.

certificate = $HOME/ssl/root/certs/trusted-id.pem 	# The CA certificate
serial = $HOME/ssl/root/db/serial   # The current serial number
crlnumber = $HOME/ssl/root/db/crlnumber   # the current crl number must be commented out to leave a V1 CRL
crl = $HOME/ssl/root/crl/trusted-id.pem   # The current CRL
private_key = $HOME/ssl/root/private/trusted-id.pem   # The private key

x509_extensions = usr_cert   # The extensions to add to the cert

# Comment out the following two lines for the "traditional" and highly broken format.
name_opt = ca_default   # Subject Name options
cert_opt = ca_default   # Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions = crl_ext

default_days = 10956   # how long to certify for
default_crl_days = 365   # how long before next CRL
default_md = sha384  # use public key default MD
preserve = yes   # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy = policy_match

# For the CA policy
[ policy_match ]
countryName = match
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

####################################################################
[ req ]
default_bits = 4096
default_md = sha384
default_keyfile = cacert.key
distinguished_name = req_distinguished_name
attributes = req_attributes
x509_extensions = v3_ca   # The extensions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options.
# default : PrintableString, T61String, BMPString.
# pkix    : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK    : XXXX a literal mask value.
# WARNING : ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req   # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName = Country Name (2 letter code)
countryName_default = NL
countryName_min = 2
countryName_max = 2

# stateOrProvinceName = State or Province Name (full name)
# stateOrProvinceName_default	= Some-State

# localityName = Locality Name (eg, city)
# localityName_default = Some-City

0.organizationName = Organization Name (eg, company)
0.organizationName_default = Homelab-Alpha Trusted Services

# we can do this but it is not needed normally :-)
# 1.organizationName = Second Organization Name (eg, company)
# 1.organizationName_default = World Wide Web Pty Ltd

# organizationalUnitName = Organizational Unit Name (eg, section)
# organizationalUnitName_default = Some-Unitname

commonName = Common Name (e.g. server FQDN or YOUR name)
commonName_default = HATS Root X1
commonName_max = 64

# emailAddress = Email Address
# emailAddress_max = 64

# SET-ex3 = SET extension number 3

[ req_attributes ]
# challengePassword = A challenge password
challengePassword_min = 6
challengePassword_max = 64

# unstructuredName = An optional company name

####################################################################
[ usr_cert ]

# These extensions are added when 'ca' signs a request.
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = critical, CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
keyUsage = critical, digitalSignature

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This is required for TSA certificates.
extendedKeyUsage = critical,timeStamping,serverAuth

[ v3_req ]

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign

[ v3_intermediate_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign
extendedKeyUsage = serverAuth, clientAuth

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName = email:copy
# Copy issuer details
# issuerAltName = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints = critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName = issuer:copy
authorityKeyIdentifier = keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1   # the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
serial = $HOME/ssl/tsaserial   # The current serial number (mandatory)
crypto_device = builtin   # OpenSSL engine to use for signing
signer_cert = $HOME/ssl/tsacert.pem   # The TSA signing certificate (optional)
certs = $HOME/ssl/cacert.pem   # Certificate chain to include in reply (optional)
signer_key = $HOME/ssl/private/tsakey.pem   # The TSA private key (optional)
signer_digest = sha384   # Signing digest to use. (Optional)
default_policy = tsa_policy1   # Policy if request did not specify it (optional)
other_policies = tsa_policy2, tsa_policy3   # acceptable policies (optional)
digests = sha1, sha256, sha384, sha512   # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100   # (optional)
clock_precision_digits = 0   # number of digits after dot. (optional)
ordering = yes   # Is ordering defined for timestamps? (optional, default: no)
tsa_name = yes   # Must the TSA name be included in the reply? (optional, default: no)
ess_cert_id_chain = no   # Must the ESS cert id chain be included? (optional, default: no)
ess_cert_id_alg = sha384   # algorithm to compute certificate identifier (optional, default: sha256)

[ insta ]   # CMP using Insta Demo CA
# Message transfer
server = pki.certificate.fi:8700
# proxy =   # set this as far as needed, e.g., http://192.168.1.1:8080
# tls_use = 0
path = pkix/

# Server authentication
recipient = "/C=FI/O=Insta Demo/CN=Insta Demo CA"   # or set srvcert or issuer
ignore_keyusage = 1   # potentially needed quirk
unprotected_errors = 1   # potentially needed quirk
extracertsout = insta.extracerts.pem

# Client authentication
ref = 3078   # user identification
secret = pass:insta   # can be used for both client and server side

# Generic message options
cmd = ir   # default operation, can be overridden on cmd line with, e.g., kur

# Certificate enrollment
subject = "/CN=openssl-cmp-test"
newkey = insta.priv.pem
out_trusted = apps/insta.ca.crt   # does not include keyUsage digitalSignature
certout = insta.cert.pem

[ pbm ]   # Password-based protection for Insta CA
# Server and client authentication
ref = \$insta::ref   # 3078
secret = \$insta::secret   # pass:insta

[ signature ]   # Signature-based protection for Insta CA
# Server authentication
trusted = \$insta::out_trusted   # apps/insta.ca.crt

# Client authentication
secret =   # disable PBM
key = \$insta::newkey   # insta.priv.pem
cert = \$insta::certout   # insta.cert.pem

[ ir ]
cmd = ir

[ cr ]
cmd = cr

[ kur ]
# Certificate update
cmd = kur
oldcert = \$insta::certout   # insta.cert.pem

[ rr ]
# Certificate revocation
cmd = rr
oldcert = \$insta::certout   # insta.cert.pem
EOF

# Create openssl config files for Root Certificate Authority.
print_section_header "Create openssl config files for Root Certificate Authority"
cat <<EOF >"$root_dir/root_ca.cnf"
#
# OpenSSL example configuration file.
# See doc/man5/config.pod for more info.
#
# This is mostly being used for generation of certificate requests,
# but may be used for auto loading of providers

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME = .

# Use this in order to automatically load providers.
openssl_conf = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics = 1

# Extra OBJECT IDENTIFIER info:
# oid_file = \$ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1 = 1.2.3.4
# Or use config file substitution like this:
# testoid2 = \${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[ openssl_init ]
providers = provider_sect

# List of providers to load
[ provider_sect ]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

# If no providers are activated explicitly, the default one is activated implicitly.
# See man 7 OSSL_PROVIDER-default for more details.
#
# If you add a section explicitly activating any other provider(s), you most
# probably need to explicitly activate the default provider, otherwise it
# becomes unavailable in openssl. As a consequence applications depending on
# OpenSSL may not work correctly which could lead to significant system
# problems including inability to remotely access the system.
[ default_sect ]
# activate = 1

####################################################################
[ ca ]
default_ca = CA_default   # The default ca section

####################################################################
[ CA_default ]

certs = $HOME/ssl/root/certs   # Where the issued certs are kept
crl_dir = $HOME/ssl/root/crl   # Where the issued crl are kept
database = $HOME/ssl/root/db/index.txt   # database index file.
unique_subject = yes   # Set to 'no' to allow creation of several certs with same subject.
new_certs_dir = $HOME/ssl/root/newcerts   # default place for new certs.

certificate = $HOME/ssl/root/certs/trusted-id.pem 	# The CA certificate
serial = $HOME/ssl/root/db/serial   # The current serial number
crlnumber = $HOME/ssl/root/db/crlnumber   # the current crl number must be commented out to leave a V1 CRL
crl = $HOME/ssl/root/crl/trusted-id.pem   # The current CRL
private_key = $HOME/ssl/root/private/trusted-id.pem   # The private key

x509_extensions = usr_cert   # The extensions to add to the cert

# Comment out the following two lines for the "traditional" and highly broken format.
name_opt = ca_default   # Subject Name options
cert_opt = ca_default   # Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions = crl_ext

default_days = 7305   # how long to certify for
default_crl_days = 365   # how long before next CRL
default_md = sha384  # use public key default MD
preserve = yes   # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy = policy_match

# For the CA policy
[ policy_match ]
countryName = match
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

####################################################################
[ req ]
default_bits = 4096
default_md = sha384
default_keyfile = cacert.key
distinguished_name = req_distinguished_name
attributes = req_attributes
x509_extensions = v3_ca   # The extensions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options.
# default : PrintableString, T61String, BMPString.
# pkix    : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK    : XXXX a literal mask value.
# WARNING : ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req   # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName = Country Name (2 letter code)
countryName_default = NL
countryName_min = 2
countryName_max = 2

# stateOrProvinceName = State or Province Name (full name)
# stateOrProvinceName_default	= Some-State

# localityName = Locality Name (eg, city)
# localityName_default = Some-City

0.organizationName = Organization Name (eg, company)
0.organizationName_default = Homelab-Alpha

# we can do this but it is not needed normally :-)
# 1.organizationName = Second Organization Name (eg, company)
# 1.organizationName_default = World Wide Web Pty Ltd

# organizationalUnitName = Organizational Unit Name (eg, section)
# organizationalUnitName_default = Some-Unitname

commonName = Common Name (e.g. server FQDN or YOUR name)
commonName_default = HA Root X1
commonName_max = 64

# emailAddress = Email Address
# emailAddress_max = 64

# SET-ex3 = SET extension number 3

[ req_attributes ]
# challengePassword = A challenge password
challengePassword_min = 6
challengePassword_max = 64

# unstructuredName = An optional company name

####################################################################
[ usr_cert ]

# These extensions are added when 'ca' signs a request.
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = critical, CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
keyUsage = critical, digitalSignature

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This is required for TSA certificates.
extendedKeyUsage = critical,timeStamping,serverAuth

[ v3_req ]

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign

[ v3_intermediate_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign
extendedKeyUsage = serverAuth, clientAuth

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName = email:copy
# Copy issuer details
# issuerAltName = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints = critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName = issuer:copy
authorityKeyIdentifier = keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1   # the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
serial = $HOME/ssl/tsaserial   # The current serial number (mandatory)
crypto_device = builtin   # OpenSSL engine to use for signing
signer_cert = $HOME/ssl/tsacert.pem   # The TSA signing certificate (optional)
certs = $HOME/ssl/cacert.pem   # Certificate chain to include in reply (optional)
signer_key = $HOME/ssl/private/tsakey.pem   # The TSA private key (optional)
signer_digest = sha384   # Signing digest to use. (Optional)
default_policy = tsa_policy1   # Policy if request did not specify it (optional)
other_policies = tsa_policy2, tsa_policy3   # acceptable policies (optional)
digests = sha1, sha256, sha384, sha512   # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100   # (optional)
clock_precision_digits = 0   # number of digits after dot. (optional)
ordering = yes   # Is ordering defined for timestamps? (optional, default: no)
tsa_name = yes   # Must the TSA name be included in the reply? (optional, default: no)
ess_cert_id_chain = no   # Must the ESS cert id chain be included? (optional, default: no)
ess_cert_id_alg = sha384   # algorithm to compute certificate identifier (optional, default: sha256)

[ insta ]   # CMP using Insta Demo CA
# Message transfer
server = pki.certificate.fi:8700
# proxy =   # set this as far as needed, e.g., http://192.168.1.1:8080
# tls_use = 0
path = pkix/

# Server authentication
recipient = "/C=FI/O=Insta Demo/CN=Insta Demo CA"   # or set srvcert or issuer
ignore_keyusage = 1   # potentially needed quirk
unprotected_errors = 1   # potentially needed quirk
extracertsout = insta.extracerts.pem

# Client authentication
ref = 3078   # user identification
secret = pass:insta   # can be used for both client and server side

# Generic message options
cmd = ir   # default operation, can be overridden on cmd line with, e.g., kur

# Certificate enrollment
subject = "/CN=openssl-cmp-test"
newkey = insta.priv.pem
out_trusted = apps/insta.ca.crt   # does not include keyUsage digitalSignature
certout = insta.cert.pem

[ pbm ]   # Password-based protection for Insta CA
# Server and client authentication
ref = \$insta::ref   # 3078
secret = \$insta::secret   # pass:insta

[ signature ]   # Signature-based protection for Insta CA
# Server authentication
trusted = \$insta::out_trusted   # apps/insta.ca.crt

# Client authentication
secret =   # disable PBM
key = \$insta::newkey   # insta.priv.pem
cert = \$insta::certout   # insta.cert.pem

[ ir ]
cmd = ir

[ cr ]
cmd = cr

[ kur ]
# Certificate update
cmd = kur
oldcert = \$insta::certout   # insta.cert.pem

[ rr ]
# Certificate revocation
cmd = rr
oldcert = \$insta::certout   # insta.cert.pem
EOF

# Create openssl config files for Intermediate Certificate Authority.
print_section_header "Create openssl config files for Intermediate Certificate Authority"
cat <<EOF >"$intermediate_dir/ca.cnf"
#
# OpenSSL example configuration file.
# See doc/man5/config.pod for more info.
#
# This is mostly being used for generation of certificate requests,
# but may be used for auto loading of providers

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME = .

# Use this in order to automatically load providers.
openssl_conf = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics = 1

# Extra OBJECT IDENTIFIER info:
# oid_file = \$ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1 = 1.2.3.4
# Or use config file substitution like this:
# testoid2 = \${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[ openssl_init ]
providers = provider_sect

# List of providers to load
[ provider_sect ]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

# If no providers are activated explicitly, the default one is activated implicitly.
# See man 7 OSSL_PROVIDER-default for more details.
#
# If you add a section explicitly activating any other provider(s), you most
# probably need to explicitly activate the default provider, otherwise it
# becomes unavailable in openssl. As a consequence applications depending on
# OpenSSL may not work correctly which could lead to significant system
# problems including inability to remotely access the system.
[ default_sect ]
# activate = 1

####################################################################
[ ca ]
default_ca = CA_default   # The default ca section

####################################################################
[ CA_default ]

certs = $HOME/ssl/intermediate/certs   # Where the issued certs are kept
crl_dir = $HOME/ssl/intermediate/crl   # Where the issued crl are kept
database = $HOME/ssl/intermediate/db/index.txt   # database index file.
unique_subject = yes   # Set to 'no' to allow creation of several certs with same subject.
new_certs_dir = $HOME/ssl/intermediate/newcerts   # default place for new certs.

certificate = $HOME/ssl/root/certs/root_ca.pem 	# The CA certificate
serial = $HOME/ssl/intermediate/db/serial   # The current serial number
crlnumber = $HOME/ssl/intermediate/db/crlnumber   # the current crl number must be commented out to leave a V1 CRL
crl = $HOME/ssl/root/crl/root_ca.pem   # The current CRL
private_key = $HOME/ssl/root/private/root_ca.pem   # The private key

x509_extensions = usr_cert   # The extensions to add to the cert

# Comment out the following two lines for the "traditional" and highly broken format.
name_opt = ca_default   # Subject Name options
cert_opt = ca_default   # Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions = crl_ext

default_days = 1826   # how long to certify for
default_crl_days = 90   # how long before next CRL
default_md = sha384  # use public key default MD
preserve = yes   # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy = policy_match

# For the CA policy
[ policy_match ]
countryName = match
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName = match
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

####################################################################
[ req ]
default_bits = 4096
default_md = sha384
default_keyfile = cacert.key
distinguished_name = req_distinguished_name
attributes = req_attributes
x509_extensions = v3_ca   # The extensions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options.
# default : PrintableString, T61String, BMPString.
# pkix    : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK    : XXXX a literal mask value.
# WARNING : ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req   # The extensions to add to a certificate request

[ req_distinguished_name ]
countryName = Country Name (2 letter code)
countryName_default = NL
countryName_min = 2
countryName_max = 2

# stateOrProvinceName = State or Province Name (full name)
# stateOrProvinceName_default	= Some-State

# localityName = Locality Name (eg, city)
# localityName_default = Some-City

0.organizationName = Organization Name (eg, company)
0.organizationName_default = Homelab-Alpha

# we can do this but it is not needed normally :-)
# 1.organizationName = Second Organization Name (eg, company)
# 1.organizationName_default = World Wide Web Pty Ltd

# organizationalUnitName = Organizational Unit Name (eg, section)
# organizationalUnitName_default = Some-Unitname

commonName = Common Name (e.g. server FQDN or YOUR name)
commonName_default = HA E1
commonName_max = 64

# emailAddress = Email Address
# emailAddress_max = 64

# SET-ex3 = SET extension number 3

[ req_attributes ]
# challengePassword = A challenge password
challengePassword_min = 6
challengePassword_max = 64

# unstructuredName = An optional company name

####################################################################
[ usr_cert ]

# These extensions are added when 'ca' signs a request.
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = critical, CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
keyUsage = critical, digitalSignature

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This is required for TSA certificates.
extendedKeyUsage = critical,timeStamping,serverAuth

[ v3_req ]

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign

[ v3_intermediate_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign
extendedKeyUsage = serverAuth, clientAuth

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName = email:copy
# Copy issuer details
# issuerAltName = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints = critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName = issuer:copy
authorityKeyIdentifier = keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1   # the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
serial = $HOME/ssl/tsaserial   # The current serial number (mandatory)
crypto_device = builtin   # OpenSSL engine to use for signing
signer_cert = $HOME/ssl/tsacert.pem   # The TSA signing certificate (optional)
certs = $HOME/ssl/cacert.pem   # Certificate chain to include in reply (optional)
signer_key = $HOME/ssl/private/tsakey.pem   # The TSA private key (optional)
signer_digest = sha384   # Signing digest to use. (Optional)
default_policy = tsa_policy1   # Policy if request did not specify it (optional)
other_policies = tsa_policy2, tsa_policy3   # acceptable policies (optional)
digests = sha1, sha256, sha384, sha512   # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100   # (optional)
clock_precision_digits = 0   # number of digits after dot. (optional)
ordering = yes   # Is ordering defined for timestamps? (optional, default: no)
tsa_name = yes   # Must the TSA name be included in the reply? (optional, default: no)
ess_cert_id_chain = no   # Must the ESS cert id chain be included? (optional, default: no)
ess_cert_id_alg = sha384   # algorithm to compute certificate identifier (optional, default: sha256)

[ insta ]   # CMP using Insta Demo CA
# Message transfer
server = pki.certificate.fi:8700
# proxy =   # set this as far as needed, e.g., http://192.168.1.1:8080
# tls_use = 0
path = pkix/

# Server authentication
recipient = "/C=FI/O=Insta Demo/CN=Insta Demo CA"   # or set srvcert or issuer
ignore_keyusage = 1   # potentially needed quirk
unprotected_errors = 1   # potentially needed quirk
extracertsout = insta.extracerts.pem

# Client authentication
ref = 3078   # user identification
secret = pass:insta   # can be used for both client and server side

# Generic message options
cmd = ir   # default operation, can be overridden on cmd line with, e.g., kur

# Certificate enrollment
subject = "/CN=openssl-cmp-test"
newkey = insta.priv.pem
out_trusted = apps/insta.ca.crt   # does not include keyUsage digitalSignature
certout = insta.cert.pem

[ pbm ]   # Password-based protection for Insta CA
# Server and client authentication
ref = \$insta::ref   # 3078
secret = \$insta::secret   # pass:insta

[ signature ]   # Signature-based protection for Insta CA
# Server authentication
trusted = \$insta::out_trusted   # apps/insta.ca.crt

# Client authentication
secret =   # disable PBM
key = \$insta::newkey   # insta.priv.pem
cert = \$insta::certout   # insta.cert.pem

[ ir ]
cmd = ir

[ cr ]
cmd = cr

[ kur ]
# Certificate update
cmd = kur
oldcert = \$insta::certout   # insta.cert.pem

[ rr ]
# Certificate revocation
cmd = rr
oldcert = \$insta::certout   # insta.cert.pem
EOF

# Create openssl config files for certificates.
print_section_header "Create openssl config files for certificates"
cat <<EOF >"$certificates_dir/cert.cnf"
#
# OpenSSL example configuration file.
# See doc/man5/config.pod for more info.
#
# This is mostly being used for generation of certificate requests,
# but may be used for auto loading of providers

# Note that you can include other files from the main configuration
# file using the .include directive.
#.include filename

# This definition stops the following lines choking if HOME isn't
# defined.
HOME = .

# Use this in order to automatically load providers.
openssl_conf = openssl_init

# Comment out the next line to ignore configuration errors
config_diagnostics = 1

# Extra OBJECT IDENTIFIER info:
# oid_file = \$ENV::HOME/.oid
oid_section = new_oids

# To use this configuration file with the "-extfile" option of the
# "openssl x509" utility, name here the section containing the
# X.509v3 extensions to use:
# extensions =
# (Alternatively, use a configuration file that has only
# X.509v3 extensions in its main [= default] section.)

[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# Add a simple OID like this:
# testoid1 = 1.2.3.4
# Or use config file substitution like this:
# testoid2 = \${testoid1}.5.6

# Policies used by the TSA examples.
tsa_policy1 = 1.2.3.4.1
tsa_policy2 = 1.2.3.4.5.6
tsa_policy3 = 1.2.3.4.5.7

# For FIPS
# Optionally include a file that is generated by the OpenSSL fipsinstall
# application. This file contains configuration data required by the OpenSSL
# fips provider. It contains a named section e.g. [fips_sect] which is
# referenced from the [provider_sect] below.
# Refer to the OpenSSL security policy for more information.
# .include fipsmodule.cnf

[ openssl_init ]
providers = provider_sect

# List of providers to load
[ provider_sect ]
default = default_sect
# The fips section name should match the section name inside the
# included fipsmodule.cnf.
# fips = fips_sect

# If no providers are activated explicitly, the default one is activated implicitly.
# See man 7 OSSL_PROVIDER-default for more details.
#
# If you add a section explicitly activating any other provider(s), you most
# probably need to explicitly activate the default provider, otherwise it
# becomes unavailable in openssl. As a consequence applications depending on
# OpenSSL may not work correctly which could lead to significant system
# problems including inability to remotely access the system.
[ default_sect ]
# activate = 1

####################################################################
[ ca ]
default_ca = CA_default   # The default ca section

####################################################################
[ CA_default ]

certs = $HOME/ssl/certificates/certs   # Where the issued certs are kept
crl_dir = $HOME/ssl/certificates/crl   # Where the issued crl are kept
database = $HOME/ssl/certificates/db/index.txt   # database index file.
unique_subject = yes   # Set to 'no' to allow creation of several certs with same subject.
new_certs_dir = $HOME/ssl/certificates/newcerts   # default place for new certs.

certificate = $HOME/ssl/intermediate/certs/ca.pem 	# The CA certificate
serial = $HOME/ssl/certificates/db/serial   # The current serial number
crlnumber = $HOME/ssl/certificates/db/crlnumber   # the current crl number must be commented out to leave a V1 CRL
crl = $HOME/ssl/intermediate/crl/ca.pem   # The current CRL
private_key = $HOME/ssl/intermediate/private/ca.pem   # The private key

x509_extensions = usr_cert   # The extensions to add to the cert

# Comment out the following two lines for the "traditional" and highly broken format.
name_opt = ca_default   # Subject Name options
cert_opt = ca_default   # Certificate field options

# Extension copying option: use with caution.
# copy_extensions = copy

# Extensions to add to a CRL. Note: Netscape communicator chokes on V2 CRLs
# so this is commented out by default to leave a V1 CRL.
# crlnumber must also be commented out to leave a V1 CRL.
# crl_extensions = crl_ext

default_days = 366   # how long to certify for
default_crl_days = 30   # how long before next CRL
default_md = sha384  # use public key default MD
preserve = yes   # keep passed DN ordering

# A few difference way of specifying how similar the request should look
# For type CA, the listed attributes must be the same, and the optional
# and supplied fields are just that :-)
policy = policy_match

# For the CA policy
[ policy_match ]
countryName = optional
stateOrProvinceName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

# For the 'anything' policy
# At this point in time, you must list all acceptable 'object' types.
[ policy_anything ]
countryName = optional
stateOrProvinceName = optional
localityName = optional
organizationName = optional
organizationalUnitName = optional
commonName = supplied
emailAddress = optional

####################################################################
[ req ]
default_bits = 4096
default_md = sha384
default_keyfile = cacert.key
distinguished_name = req_distinguished_name
attributes = req_attributes
x509_extensions = v3_ca   # The extensions to add to the self signed cert

# Passwords for private keys if not present they will be prompted for
# input_password = secret
# output_password = secret

# This sets a mask for permitted string types. There are several options.
# default : PrintableString, T61String, BMPString.
# pkix    : PrintableString, BMPString (PKIX recommendation before 2004)
# utf8only: only UTF8Strings (PKIX recommendation after 2004).
# nombstr : PrintableString, T61String (no BMPStrings or UTF8Strings).
# MASK    : XXXX a literal mask value.
# WARNING : ancient versions of Netscape crash on BMPStrings or UTF8Strings.
string_mask = utf8only

# req_extensions = v3_req   # The extensions to add to a certificate request

[ req_distinguished_name ]
# countryName = Country Name (2 letter code)
# countryName_default = NL
# countryName_min = 2
# countryName_max = 2

# stateOrProvinceName = State or Province Name (full name)
# stateOrProvinceName_default	= Some-State

# localityName = Locality Name (eg, city)
# localityName_default = Some-City

# 0.organizationName = Organization Name (eg, company)
# 0.organizationName_default = Homelab-Alpha

# we can do this but it is not needed normally :-)
# 1.organizationName = Second Organization Name (eg, company)
# 1.organizationName_default = World Wide Web Pty Ltd

# organizationalUnitName = Organizational Unit Name (eg, section)
# organizationalUnitName_default = Some-Unitname

commonName = Common Name (e.g. server FQDN or YOUR name)
commonName_default =
commonName_max = 64

# emailAddress = Email Address
# emailAddress_max = 64

# SET-ex3 = SET extension number 3

[ req_attributes ]
# challengePassword = A challenge password
challengePassword_min = 6
challengePassword_max = 64

# unstructuredName = An optional company name

####################################################################
[ usr_cert ]

# These extensions are added when 'ca' signs a request.
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = critical, CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment
keyUsage = critical, digitalSignature

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This is required for TSA certificates.
extendedKeyUsage = critical,timeStamping,serverAuth

[ v3_req ]

# Extensions to add to a certificate request
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ v3_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical,CA:true

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign

[ v3_intermediate_ca ]
# Extensions for a typical CA
# PKIX recommendation.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0

# Key usage: this is typical for a CA certificate. However since it will
# prevent it being used as an test self-signed certificate it is best
# left out by default.
keyUsage = critical, digitalSignature, keyCertSign, cRLSign
extendedKeyUsage = serverAuth, clientAuth

# Include email address in subject alt name: another PKIX recommendation
# subjectAltName = email:copy
# Copy issuer details
# issuerAltName = issuer:copy

# DER hex encoding of an extension: beware experts only!
# obj = DER:02:03
# Where 'obj' is a standard or added object
# You can even override a supported extension:
# basicConstraints = critical, DER:30:03:01:01:FF

[ crl_ext ]

# CRL extensions.
# Only issuerAltName and authorityKeyIdentifier make any sense in a CRL.

# issuerAltName = issuer:copy
authorityKeyIdentifier = keyid:always

[ proxy_cert_ext ]
# These extensions should be added when creating a proxy certificate

# This goes against PKIX guidelines but some CAs do it and some software
# requires this to avoid interpreting an end user certificate as a CA.

basicConstraints = CA:FALSE

# This is typical in keyUsage for a client certificate.
# keyUsage = nonRepudiation, digitalSignature, keyEncipherment

# PKIX recommendations harmless if included in all certificates.
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer

# This stuff is for subjectAltName and issuerAltname.
# Import the email address.
# subjectAltName = email:copy
# An alternative to produce certificates that aren't
# deprecated according to PKIX.
# subjectAltName = email:move

# Copy subject details
# issuerAltName = issuer:copy

# This really needs to be in place for it to be a proxy certificate.
proxyCertInfo = critical,language:id-ppl-anyLanguage,pathlen:3,policy:foo

####################################################################
[ tsa ]

default_tsa = tsa_config1   # the default TSA section

[ tsa_config1 ]

# These are used by the TSA reply generation only.
serial = $HOME/ssl/tsaserial   # The current serial number (mandatory)
crypto_device = builtin   # OpenSSL engine to use for signing
signer_cert = $HOME/ssl/tsacert.pem   # The TSA signing certificate (optional)
certs = $HOME/ssl/cacert.pem   # Certificate chain to include in reply (optional)
signer_key = $HOME/ssl/private/tsakey.pem   # The TSA private key (optional)
signer_digest = sha384   # Signing digest to use. (Optional)
default_policy = tsa_policy1   # Policy if request did not specify it (optional)
other_policies = tsa_policy2, tsa_policy3   # acceptable policies (optional)
digests = sha1, sha256, sha384, sha512   # Acceptable message digests (mandatory)
accuracy = secs:1, millisecs:500, microsecs:100   # (optional)
clock_precision_digits = 0   # number of digits after dot. (optional)
ordering = yes   # Is ordering defined for timestamps? (optional, default: no)
tsa_name = yes   # Must the TSA name be included in the reply? (optional, default: no)
ess_cert_id_chain = no   # Must the ESS cert id chain be included? (optional, default: no)
ess_cert_id_alg = sha384   # algorithm to compute certificate identifier (optional, default: sha256)

[ insta ]   # CMP using Insta Demo CA
# Message transfer
server = pki.certificate.fi:8700
# proxy =   # set this as far as needed, e.g., http://192.168.1.1:8080
# tls_use = 0
path = pkix/

# Server authentication
recipient = "/C=FI/O=Insta Demo/CN=Insta Demo CA"   # or set srvcert or issuer
ignore_keyusage = 1   # potentially needed quirk
unprotected_errors = 1   # potentially needed quirk
extracertsout = insta.extracerts.pem

# Client authentication
ref = 3078   # user identification
secret = pass:insta   # can be used for both client and server side

# Generic message options
cmd = ir   # default operation, can be overridden on cmd line with, e.g., kur

# Certificate enrollment
subject = "/CN=openssl-cmp-test"
newkey = insta.priv.pem
out_trusted = apps/insta.ca.crt   # does not include keyUsage digitalSignature
certout = insta.cert.pem

[ pbm ]   # Password-based protection for Insta CA
# Server and client authentication
ref = \$insta::ref   # 3078
secret = \$insta::secret   # pass:insta

[ signature ]   # Signature-based protection for Insta CA
# Server authentication
trusted = \$insta::out_trusted   # apps/insta.ca.crt

# Client authentication
secret =   # disable PBM
key = \$insta::newkey   # insta.priv.pem
cert = \$insta::certout   # insta.cert.pem

[ ir ]
cmd = ir

[ cr ]
cmd = cr

[ kur ]
# Certificate update
cmd = kur
oldcert = \$insta::certout   # insta.cert.pem

[ rr ]
# Certificate revocation
cmd = rr
oldcert = \$insta::certout   # insta.cert.pem
EOF
